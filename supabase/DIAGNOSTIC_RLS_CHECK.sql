-- ============================================================================
-- DIAGN√ìSTICO COMPLETO - Error 403 Persistente
-- ============================================================================
-- Este script te dir√° EXACTAMENTE qu√© est√° mal
-- ============================================================================

-- ============================================================================
-- 1. VERIFICAR TU USUARIO Y ROL
-- ============================================================================
SELECT
  'üîç TU INFORMACI√ìN' as seccion,
  auth.uid() as tu_user_id,
  (SELECT email FROM user_profiles WHERE user_id = auth.uid()) as tu_email,
  (SELECT role FROM user_profiles WHERE user_id = auth.uid()) as tu_rol,
  (SELECT full_name FROM user_profiles WHERE user_id = auth.uid()) as tu_nombre,
  (SELECT is_enabled FROM user_profiles WHERE user_id = auth.uid()) as cuenta_activa;

-- ============================================================================
-- 2. VERIFICAR QUE LAS TABLAS EXISTEN
-- ============================================================================
SELECT
  'üóÑÔ∏è TABLAS' as seccion,
  table_name,
  CASE
    WHEN table_name IN ('remittance_types', 'remittances', 'remittance_status_history')
    THEN '‚úÖ Existe'
    ELSE '‚ùå No existe'
  END as estado
FROM information_schema.tables
WHERE table_schema = 'public'
  AND table_name IN ('remittance_types', 'remittances', 'remittance_status_history')
ORDER BY table_name;

-- ============================================================================
-- 3. VERIFICAR SI RLS EST√Å HABILITADO
-- ============================================================================
SELECT
  'üîí RLS STATUS' as seccion,
  tablename,
  rowsecurity as rls_habilitado,
  CASE
    WHEN rowsecurity = true THEN '‚úÖ RLS Habilitado'
    ELSE '‚ùå RLS Deshabilitado'
  END as estado
FROM pg_tables
WHERE schemaname = 'public'
  AND tablename IN ('remittance_types', 'remittances', 'remittance_status_history')
ORDER BY tablename;

-- ============================================================================
-- 4. CONTAR POL√çTICAS EXISTENTES
-- ============================================================================
SELECT
  'üìã POL√çTICAS CREADAS' as seccion,
  tablename,
  COUNT(*) as cantidad_politicas,
  CASE
    WHEN COUNT(*) = 0 THEN '‚ùå Sin pol√≠ticas - ESTE ES EL PROBLEMA'
    WHEN COUNT(*) < 3 THEN '‚ö†Ô∏è Pol√≠ticas incompletas'
    ELSE '‚úÖ Pol√≠ticas creadas'
  END as estado
FROM pg_policies
WHERE schemaname = 'public'
  AND tablename IN ('remittance_types', 'remittances', 'remittance_status_history')
GROUP BY tablename
ORDER BY tablename;

-- ============================================================================
-- 5. LISTAR TODAS LAS POL√çTICAS
-- ============================================================================
SELECT
  'üìú DETALLE DE POL√çTICAS' as seccion,
  tablename,
  policyname,
  cmd as operacion,
  CASE
    WHEN cmd = 'SELECT' THEN 'üìñ Ver'
    WHEN cmd = 'INSERT' THEN '‚ûï Crear'
    WHEN cmd = 'UPDATE' THEN '‚úèÔ∏è Editar'
    WHEN cmd = 'DELETE' THEN 'üóëÔ∏è Eliminar'
    ELSE cmd
  END as tipo
FROM pg_policies
WHERE schemaname = 'public'
  AND tablename IN ('remittance_types', 'remittances', 'remittance_status_history')
ORDER BY tablename, cmd;

-- ============================================================================
-- 6. PROBAR ACCESO DIRECTO A LA TABLA
-- ============================================================================
-- Intenta leer la tabla directamente
DO $$
DECLARE
  record_count INTEGER;
BEGIN
  BEGIN
    SELECT COUNT(*) INTO record_count FROM remittance_types;
    RAISE NOTICE '‚úÖ Puedes leer remittance_types. Registros: %', record_count;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE NOTICE '‚ùå NO puedes leer remittance_types. Error: %', SQLERRM;
  END;
END $$;

-- ============================================================================
-- 7. VERIFICAR PERMISOS DE TABLA
-- ============================================================================
SELECT
  'üîê PERMISOS DE TABLA' as seccion,
  table_name,
  grantee,
  privilege_type,
  CASE
    WHEN grantee = 'authenticated' THEN '‚úÖ Usuarios autenticados'
    WHEN grantee = 'anon' THEN 'üîµ Usuarios an√≥nimos'
    WHEN grantee = 'postgres' THEN 'üî¥ Super usuario'
    ELSE grantee
  END as quien
FROM information_schema.role_table_grants
WHERE table_schema = 'public'
  AND table_name IN ('remittance_types', 'remittances', 'remittance_status_history')
ORDER BY table_name, grantee, privilege_type;

-- ============================================================================
-- 8. VERIFICAR SI HAY DATOS EN LA TABLA
-- ============================================================================
-- Esto lo ejecuta el sistema sin RLS
SELECT
  'üìä DATOS EN TABLA' as seccion,
  (SELECT COUNT(*) FROM remittance_types) as total_tipos_remesa,
  (SELECT COUNT(*) FROM remittances) as total_remesas,
  CASE
    WHEN (SELECT COUNT(*) FROM remittance_types) = 0
    THEN '‚ö†Ô∏è Tabla vac√≠a - Necesitas crear tipos de remesa'
    ELSE '‚úÖ Hay datos'
  END as estado_datos;

-- ============================================================================
-- 9. VERIFICAR SI USER_PROFILES TIENE TU REGISTRO
-- ============================================================================
SELECT
  'üë§ TU PERFIL' as seccion,
  EXISTS (SELECT 1 FROM user_profiles WHERE user_id = auth.uid()) as perfil_existe,
  CASE
    WHEN EXISTS (SELECT 1 FROM user_profiles WHERE user_id = auth.uid())
    THEN '‚úÖ Tu perfil existe'
    ELSE '‚ùå NO EXISTE tu perfil en user_profiles - PROBLEMA CR√çTICO'
  END as estado;

-- ============================================================================
-- 10. DIAGN√ìSTICO FINAL
-- ============================================================================
SELECT
  'üéØ DIAGN√ìSTICO FINAL' as seccion,
  CASE
    -- Caso 1: No existe el perfil del usuario
    WHEN NOT EXISTS (SELECT 1 FROM user_profiles WHERE user_id = auth.uid())
    THEN '‚ùå PROBLEMA: Tu usuario no existe en user_profiles. Ejecuta la secci√≥n SOLUCI√ìN A.'

    -- Caso 2: El rol no es admin
    WHEN (SELECT role FROM user_profiles WHERE user_id = auth.uid()) NOT IN ('admin', 'super_admin')
    THEN '‚ùå PROBLEMA: Tu rol no es admin. Ejecuta la secci√≥n SOLUCI√ìN B.'

    -- Caso 3: RLS no est√° habilitado
    WHEN NOT EXISTS (
      SELECT 1 FROM pg_tables
      WHERE schemaname = 'public'
        AND tablename = 'remittance_types'
        AND rowsecurity = true
    )
    THEN '‚ùå PROBLEMA: RLS no est√° habilitado. Ejecuta la secci√≥n SOLUCI√ìN C.'

    -- Caso 4: No hay pol√≠ticas
    WHEN (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'remittance_types') = 0
    THEN '‚ùå PROBLEMA: No hay pol√≠ticas RLS. Ejecuta la secci√≥n SOLUCI√ìN D.'

    -- Caso 5: Todo est√° bien pero sigue fallando
    ELSE '‚ö†Ô∏è Todo parece estar bien. El problema puede ser de sesi√≥n. Ejecuta SOLUCI√ìN E.'
  END as diagnostico,

  -- Informaci√≥n adicional
  (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'remittance_types') as politicas_remittance_types,
  (SELECT role FROM user_profiles WHERE user_id = auth.uid()) as tu_rol_actual,
  (SELECT rowsecurity FROM pg_tables WHERE tablename = 'remittance_types' AND schemaname = 'public') as rls_enabled;

-- ============================================================================
-- SOLUCIONES
-- ============================================================================

-- SOLUCI√ìN A: Crear tu perfil de usuario
-- Ejecuta esto si el diagn√≥stico dice "Tu usuario no existe en user_profiles"
/*
INSERT INTO user_profiles (user_id, email, role, full_name, is_enabled)
SELECT
  auth.uid(),
  (SELECT email FROM auth.users WHERE id = auth.uid()),
  'super_admin',
  'Administrador',
  true
WHERE NOT EXISTS (SELECT 1 FROM user_profiles WHERE user_id = auth.uid());
*/

-- SOLUCI√ìN B: Actualizar tu rol a admin
-- Ejecuta esto si el diagn√≥stico dice "Tu rol no es admin"
/*
UPDATE user_profiles
SET role = 'super_admin'
WHERE user_id = auth.uid();

-- Verificar el cambio
SELECT user_id, email, role FROM user_profiles WHERE user_id = auth.uid();
*/

-- SOLUCI√ìN C: Habilitar RLS
-- Ejecuta esto si el diagn√≥stico dice "RLS no est√° habilitado"
/*
ALTER TABLE remittance_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE remittances ENABLE ROW LEVEL SECURITY;
ALTER TABLE remittance_status_history ENABLE ROW LEVEL SECURITY;
*/

-- SOLUCI√ìN D: Crear las pol√≠ticas
-- Ejecuta esto si el diagn√≥stico dice "No hay pol√≠ticas RLS"
-- Usa el script APPLY_RLS_POLICIES_NOW.sql completo

-- SOLUCI√ìN E: Limpiar sesi√≥n y reautenticar
-- Si todo est√° bien pero sigue fallando:
-- 1. Cierra sesi√≥n en la aplicaci√≥n
-- 2. Borra el localStorage del navegador (F12 ‚Üí Application ‚Üí Local Storage ‚Üí Clear)
-- 3. Vuelve a iniciar sesi√≥n
-- 4. El token JWT se actualizar√° con tus permisos correctos

-- ============================================================================
-- ‚úÖ VERIFICACI√ìN POST-SOLUCI√ìN
-- ============================================================================
-- Despu√©s de aplicar la soluci√≥n, ejecuta esto para verificar:
/*
SELECT
  '‚úÖ VERIFICACI√ìN' as seccion,
  (SELECT role FROM user_profiles WHERE user_id = auth.uid()) as tu_rol,
  (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'remittance_types') as politicas,
  (SELECT rowsecurity FROM pg_tables WHERE tablename = 'remittance_types' AND schemaname = 'public') as rls_enabled,
  CASE
    WHEN (SELECT role FROM user_profiles WHERE user_id = auth.uid()) IN ('admin', 'super_admin')
      AND (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'remittance_types') >= 3
      AND (SELECT rowsecurity FROM pg_tables WHERE tablename = 'remittance_types' AND schemaname = 'public') = true
    THEN '‚úÖ TODO CORRECTO - Cierra sesi√≥n y vuelve a iniciar'
    ELSE '‚ùå A√∫n hay problemas - Revisa el diagn√≥stico'
  END as estado_final;
*/
